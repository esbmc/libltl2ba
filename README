1. ABOUT

The libltl2ba software is a modification of LTL2BA-1.3 and incorporates the
changes from LTL2C. It aims at making the functionality of both available in
form of a library while maintaining compatibility with the original algorithms.

For bug-reports and/or questions about libltl2ba, please contact Franz Brauße:
<franz.brausse@manchester.ac.uk>

LTL2C has been written by Jeremy Morse.  It is based on LTL2BA version 1.1 and
adds output formats for dot and the ESBMC model checker.

LTL2BA has originally been written by Denis Oddoux and was modified by Paul
Gastin.  It is based on the translation algorithm presented at CAV '01:
	P.Gastin and D.Oddoux
	"Fast LTL to Büchi Automata Translation"
	in 13th International Conference on Computer Aided Verification, CAV 2001,
	G. Berry, H. Comon, A. Finkel (Eds.)
	Paris, France, July 18-22, 2001,
	Proceedings - LNCS 2102, pp. 53-65

Part of the code included is issued from the SPIN software Version 3.4.1
The SPIN software is written by Gerard J. Holzmann, originally as part
of ``Design and Validation of Protocols,'' ISBN 0-13-539925-4,
1991, Prentice Hall, Englewood Cliffs, NJ, 07632
Here are the files that contain some code from Spin v3.4.1 :

	cache.c  (originally tl_cache.c)
	lex.c    (           tl_lex.c  )
	ltl2ba.h (           tl.h      )
	main.c   (           tl_main.c )
	mem.c.   (           tl_mem.c  )
	parse.c  (           tl_parse.c)
	rewrt.c  (           tl_rewrt.c)
	trans.c	 (           tl_trans.c)

2. COMPILING

unpack the archive:
> tar -xzf libltl2ba-2.0.tar.gz
> cd libltl2ba-2.0

compile the program
> make

3. EXECUTING

run the program
> ./ltl2ba -f 'formula'

The formula is an LTL formula, and may contain propositional symbols,
boolean operators, temporal operators, and parentheses.
The syntax is a backwards-compatible extension of used is the one used in the
'Spin' model-checker (see CHANGES below for operator precedence).

Propositonal Symbols:
        true, false
        any lowercase string
        {C expression}

Boolean operators:
        !, NOT  (negation)
        ->      (implication)
        <->     (equivalence)
        &&, /\  (and)
        ||, \/  (or)

Temporal operators:
        G, []   (always)
        F, <>   (eventually)
        U       (until)
        V       (release)
        X       (next)

Use spaces between any symbols.

The result is a 'never' claim in Promela that can be given to the Spin model
checker to verify properties on a system.

run the command
> ./ltl2ba -h
to see the possible options for executing the program

4. LICENSE

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version. GNU GPL is included in this
distribution, in a file called 'LICENSE'

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA

5. CHANGES

* LTL2BA - Version 1.0 - October 2001
  Written by Denis Oddoux, LIAFA, France
  Copyright (c) 2001  Denis Oddoux

* LTL2BA - Version 1.1 - August 2007
  Modified by Paul Gastin, LSV, France
  Copyright (c) 2007  Paul Gastin
  Available at http://www.lsv.ens-cachan.fr/~gastin/ltl2ba

  - fixing a bug in the way sets were used for strongly connected components.
    Thanks to Joachim Klein (klein@tcs.inf.tu-dresden.de) who found the bug and
    proposed a patch to fix it.
  - fixing a bug in the simplification with strongly connected components for
    the generalized Büchi automaton.
  - improving the simplification with strongly connected components for the
    generalized Büchi automaton.
  - using getrusage to compute running times for the statistics
  - some other minor updates.

* LTL2C - Version 1.0 - October 2013
  Modified by Jeremy Morse
  Copyright (c) 2013  Jeremy Morse

  - Two additional output formats besides spin selected by option -O:
    c  : an interpretation of the Büchi automaton in terms of a C program using
         ESBMC intrinsics
    dot: the format understood by the dot family of tools for drawing the Büchi
         automaton as a graph (the default sink state is omitted here for
         brevity)

* LTL2BA - Version 1.2 - May 2018
  Modified by Paul Gastin, LSV, France
  Copyright (c) 2018  Paul Gastin
  Available at http://www.lsv.ens-cachan.fr/~gastin/ltl2ba

* LTL2BA - Version 1.3 - June 2020
  Modified by Paul Gastin, LSV, France
  Copyright (c) 2018  Paul Gastin
  Available at http://www.lsv.ens-cachan.fr/~gastin/ltl2ba

  Thanks to Jerry James for the patches addressing the following issues
  - compatibility with gcc 10 (link-time failure for identically named variables
    in different files)
  - Remove unused function and variable declarations
  - Make (f)printf format declarations match the types of the corresponding
    expressions
  - Remove the second argument to Fatal(), fatal() and non_fatal(), since it is
    always NULL
  - Make main() return something (since it is supposed to return int)

* libltl2ba - Version 2.0 - December 2023
  Modified by Franz Brauße, University of Manchester, UK
  Copyright (c) 2023  Franz Brauße
  Available at https://github.com/fbrausse/libltl2ba

  - Various fixes in printing alternating, generalized and Büchi automata
  - Parsing input formulas with the following precedence order for binary
    operators (high to low): U and V, &&, ||, <->, -> (all are still
    left-associative, which may^W must change in the future)
  - Additional debugging information (-d) is output to stderr
  - Many non-semantic changes to the internal API in order for libltl2ba to
    become usable as a library, too; this includes defining and exporting the
    data structures corresponding to the 3 representations of automata used
    internally as well as removing global state and renaming/moving some
    functions
  - Provide a symlink ltl2c to the ltl2ba binary, which defaults to the 'c'
    output mode from LTL2C
